<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Andyb1ance.github.io</id>
    <title>Andy</title>
    <updated>2023-03-23T11:21:34.874Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Andyb1ance.github.io"/>
    <link rel="self" href="https://Andyb1ance.github.io/atom.xml"/>
    <subtitle>Andy摸鱼的地方</subtitle>
    <logo>https://Andyb1ance.github.io/images/avatar.png</logo>
    <icon>https://Andyb1ance.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Andy</rights>
    <entry>
        <title type="html"><![CDATA[医学图像常用软件和python包]]></title>
        <id>https://Andyb1ance.github.io/post/yi-xue-tu-xiang-chang-yong-ruan-jian-he-python-bao/</id>
        <link href="https://Andyb1ance.github.io/post/yi-xue-tu-xiang-chang-yong-ruan-jian-he-python-bao/">
        </link>
        <updated>2023-03-23T11:17:03.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>主要学习SimpleITK和3d Slicer，以及elastix和ANTs toolbox。<br>
备选：ITK-Snap</p>
<h2 id="医学图像处理软件">医学图像处理软件</h2>
<p>ITK-Snap和3D Slicer都是流行的、开源的医学图像处理软件。它们的目的都是为了方便医学研究人员对医学图像进行可视化、分析和处理。以下是它们之间的一些主要异同点：</p>
<ol>
<li>
<p>ITK-Snap是基于交互式分割的软件，而3D Slicer是一个更全面的解决方案，包括可视化、数据预处理、分析和模拟等功能。</p>
</li>
<li>
<p>3D Slicer采用Qt框架，支持多平台，具有良好的用户界面和脚本编写功能。</p>
</li>
<li>
<p>ITK-Snap是专门为医学影像分割设计的，拥有许多先进的分割算法和工具，适合用于分割MRI和CT等医学影像。</p>
</li>
</ol>
<p>除了ITK-Snap和3D Slicer之外，还有一些其他的医学图像处理软件，包括：</p>
<ol>
<li>
<p>OsiriX：一款专门用于读取、处理和呈现DICOM格式医学图像的软件，主要适用于放射科医生。</p>
</li>
<li>
<p>MedINRIA：一款基于INRIA开发的医学图像处理软件，适用于MRI和DTI数据分析，包括分割、配准、可视化等功能。</p>
</li>
<li>
<p>MITK：一种跨平台的医学图像处理和分析工具，提供大量的功能模块，包括可视化、数据处理、分割、配准等。</p>
</li>
<li>
<p>VTK：The Visualization Toolkit 是一个通用的计算机图形学和可视化库，可以用于医学图像处理，支持各种操作系统和编程语言。</p>
</li>
<li>
<p>Amira：Amira是一个3D图像处理和分析软件，支持多种文件格式和数据来源，包括CT、MRI、PET和SPECT等。</p>
</li>
<li>
<p>ImageJ：一款Java开发的图像处理软件，支持灰度和彩色图像的处理和分析，适用于医学图像分析和量化。</p>
</li>
</ol>
<p>这只是一部分列表，还有很多其他的医学图像处理软件可供选择，具体选择应根据使用者的需求和实际情况而定。</p>
<h2 id="3d-slicer和itk-snap">3D Slicer和ITK-Snap</h2>
<h2 id="itk-vtk和simpleitk">ITK、VTK和SimpleITK</h2>
<h2 id="医学图像配准">医学图像配准</h2>
<p>基础：</p>
<ol>
<li>ITK：医学图像处理软件包</li>
<li>VTK：三维计算机图形学、图像处理和可视化软件包</li>
<li>SimpleITK：ITK的简化接口</li>
</ol>
<p>配准备选列表：</p>
<ol>
<li>elastix：github仓库https://github.com/SuperElastix/elastix/ 基于Insight segmentation and registration ToolKit（ITK），直接下载二进制压缩包，无需编译，windows/linux可运行</li>
<li>SimpleElastix：github仓库https://github.com/SuperElastix/SimpleElastix 基于SimpleITK和elastix，支持多语言，需要下载源码进行编译，windows/linux可运行</li>
<li>ITKElastx:github仓库https://github.com/InsightSoftwareConsortium/ITKElastix 提供elastix的ITK python接口，直接使用pip install即可</li>
<li>ANTs：github仓库https://github.com/ANTsX/ANTs/ 需要现在源码进行编译</li>
<li>ANTsPy：github仓库https://github.com/ANTsX/ANTsPy ANTs的python接口，直接使用pip install即可</li>
</ol>
<h3 id="参考">参考</h3>
<p>医学图像配准是医学图像处理中的一个重要应用，有很多配准工具箱可以选择。以下是一些常用的工具箱：</p>
<ol>
<li>Elastix：Elastix是一个开源的医学图像配准工具，支持2D、3D和4D图像配准，并提供了许多先进的算法和模块。</li>
</ol>
<ul>
<li>
<p>3D Slicer拓展：Elastix提供了在3D Slicer中调用的扩展工具箱。</p>
</li>
<li>
<p>Python接口：Elastix提供了Python接口，使得用户能够轻松地将其集成到Python代码中。</p>
</li>
</ul>
<ol start="2">
<li>ANTs：ANTs是另一个流行的医学图像配准软件，支持不同类型的图像配准，包括MRI、CT、PET等。它还包括一系列工具，可以进行分析、可视化和统计学分析。</li>
</ol>
<ul>
<li>
<p>3D Slicer拓展：ANTs提供了在3D Slicer中调用的扩展工具箱。</p>
</li>
<li>
<p>Python接口：ANTs提供了Python接口，允许用户使用Python脚本来控制配准过程。</p>
</li>
</ul>
<ol start="3">
<li>FSL：FSL是另一个流行的医学图像处理软件包，包含大量的工具和算法，可以用于MRI、DTI和fMRI等图像配准和分析。</li>
</ol>
<ul>
<li>
<p>3D Slicer拓展：FSL提供了在3D Slicer中调用的扩展工具箱。</p>
</li>
<li>
<p>Python接口：FSL提供了Python接口，使得用户能够轻松地将其集成到Python代码中。</p>
</li>
</ul>
<ol start="4">
<li>ITK：ITK是一个跨平台的C++库，提供了许多先进的算法和模块，可以用于医学图像配准、分割和分析。</li>
</ol>
<ul>
<li>
<p>3D Slicer拓展：ITK被广泛用于3D Slicer中，并作为标准配准器使用。</p>
</li>
<li>
<p>Python接口：ITK提供了Python接口，使得用户能够轻松地将其集成到Python代码中。</p>
</li>
</ul>
<p>除了上述这些工具箱以外，还有很多其他的工具箱可以选择，比如NiftyReg、BrainSuite等，每个工具都有自己的特点和优势。</p>
<p>除了Elastix、ANTs、FSL和ITK之外，还有许多其他的医学图像配准工具箱可供选择：</p>
<ol>
<li>
<p>NiftyReg：NiftyReg是一个开源的医学图像配准工具，支持MRI和CT等图像的配准，包括2D和3D图像的配准。它还提供了一些高级功能，如B-spline变换和负责任的配准。同时，NiftyReg也提供了C++和Python接口。</p>
</li>
<li>
<p>BRAINSFit：BRAINSFit是由BRAINSTools项目提供的一种医学图像配准工具，支持MRI、CT、PET等各种类型的图像配准。它主要基于强大的ANTS算法，并提供了许多参数调节选项。</p>
</li>
<li>
<p>MIRTK：MIRTK是一个跨平台的医学图像处理框架，其中包含了许多有用的工具和算法，用于MRI、CT、PET、SPECT等图像的配准、分割、重建和分析等。它采用了现代的C++11标准，并提供了Python接口。</p>
</li>
<li>
<p>Plastimatch：Plastimatch是一个开源的医学图像配准工具，支持MRI、CT、PET等不同类型的图像配准，同时还提供了许多可视化和统计学分析功能。它支持C++和Python接口。</p>
</li>
<li>
<p>SimpleElastix：SimpleElastix是一个介于Elastix和ITK之间的库，可以轻松地在Python中实现医学图像配准，它封装了Elastix和ITK的底层代码，使得用户可以快速使用这两个库进行配准。</p>
</li>
<li>
<p>PyMedImage：PyMedImage是一个基于Python的医学图像处理库，包括了一些常见的图像处理算法，如滤波、边缘检测、配准等，并提供了简单易用的API接口。</p>
</li>
<li>
<p>MedPy：MedPy是一个跨平台的医学图像处理库，它支持多种数据格式和模态，包括DICOM、NIfTI、MGH和Analyze等。它提供了许多常见的医学图像处理算法，如滤波、边缘检测、配准、分割和重建等，并提供了Python接口。</p>
</li>
</ol>
<p>这只是列举了一部分常见的医学图像配准工具箱，选择适合自己需求的工具箱需要考虑很多因素，如应用领域、数据格式、算法可靠性等等。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[医学图像分类和坐标系]]></title>
        <id>https://Andyb1ance.github.io/post/yi-xue-tu-xiang-fen-lei-he-zuo-biao-xi/</id>
        <link href="https://Andyb1ance.github.io/post/yi-xue-tu-xiang-fen-lei-he-zuo-biao-xi/">
        </link>
        <updated>2023-03-22T10:36:57.000Z</updated>
        <content type="html"><![CDATA[<h2 id="三维图像的分类">三维图像的分类</h2>
<p>体素（Voxel）、点云（point clouds）和网格（mesh）都是三维图像处理中常用的数据形式，但它们各自有着不同的优缺点和适用范围。下面是它们的异同点及其特点：</p>
<ol>
<li>体素（Voxel）<br>
体素是三维空间中的一个立方体单元，类似于二维空间中的像素，通常被用来表示物体或场景中的体积数据，是一种体积表示法。每个体素包含有关该区域的信息，例如其颜色和密度、透明度等。</li>
</ol>
<p>优点：</p>
<ul>
<li>可以直接表示体积数据，精确表示三维物体的形状、大小、位置和内部结构，适用于医学图像分析、科学研究等领域进行精确的物理模拟和计算。</li>
<li>体素方便存储和处理，可以通过简单的操作进行旋转、缩放等变换。</li>
</ul>
<p>缺点：</p>
<ul>
<li>当需要描述复杂几何形状时，需要使用大量的体素，导致存储和计算资源消耗很大。</li>
<li>体素粒度越小，对应的计算量也越大，而体素粒度越大，对于精细的三维模型表示就不够准确。</li>
</ul>
<p>适用范围：医学、生物、机械等领域中的数据分析和物理模拟等。</p>
<ol start="2">
<li>点云（Point Cloud）<br>
点云是由一系列离散的点组成的三维数据集合，每个点都有自己的坐标位置和相关属性。</li>
</ol>
<p>优点：</p>
<ul>
<li>点云数据量相对体素较小，可以直接表示实际物体的表面几何形状和细节，且处理速度较快。</li>
<li>点云具有灵活性，可以从各种传感器（如激光雷达、摄像机）收集，适用于多种应用场景。</li>
</ul>
<p>缺点：</p>
<ul>
<li>可能存在点云数据缺失问题，例如遮挡和视野受限等。</li>
<li>点云数目越大，对应的计算量也越大，造成存储和计算资源消耗很大。</li>
<li>点云数据的密度和采样方式会影响到表面几何的表示和重建质量，且对于物体内部结构的表示和物理模拟不够准确</li>
</ul>
<p>适用范围：三维重建、虚拟现实等需要直接表示表面几何形状的领域。</p>
<ol start="3">
<li>网格（Mesh）<br>
网格是由三角形或四边形面片构成的三维模型，每个面片由三角形或四边形的顶点组成，类似于3D打印中的多边形网格，是一种表面表示法，网格可以包含颜色、纹理、法线等信息。</li>
</ol>
<p>优点：</p>
<ul>
<li>网格数据量相对于体素和点云较小，可以高效地表示复杂的几何形状和表面细节，并且可以轻松地进行渲染和显示。</li>
<li>Mesh可以进行更加精细的表面重建，并且能够支持更好的纹理映射和光照计算等。</li>
</ul>
<p>缺点：</p>
<ul>
<li>网格的表面形状由面片组成，对于内部结构表示不够准确，同时对于非凸面、孔洞和特殊拓扑结构的物体处理会比较困难。不能精确地表示物体的形状和位置。</li>
<li>网格通常需要复杂的计算才能生成，因此要求的计算资源更多。在表达大规模几何对象时，Mesh可能需要很多三角形或四边形面片，导致文件大小变得很大。</li>
</ul>
<p>适用范围：图形学、游戏开发、建筑设计等需要高效表示几何形状并且需要进行渲染的领域。</p>
<p>综上所述，选择哪种三维数据表示方法取决于具体应用场景和需求。如果需要精确地表示物体的形状和位置，可以选择体素；如果需要表达物体的表面形状，可以选择点云或Mesh。</p>
<h2 id="医学图像三维坐标系">医学图像三维坐标系</h2>
<p>医学图像三维坐标系有世界坐标系（xyz）、解剖学坐标系（RAS)和图像坐标系(ijk），它们的差异和优缺点如下：</p>
<figure data-type="image" tabindex="1"><img src="https://typora-1259418038.cos.ap-guangzhou.myqcloud.com/typora/9e0f0f44598846adb74d10b3b4421dfc.png" alt="" loading="lazy"></figure>
<ol>
<li>世界坐标系 World coordinate system：</li>
</ol>
<p>世界坐标系是一个三维空间中的全局坐标系，它通常被用来描述医学图像所处的物理环境，如手术室或扫描室。世界坐标系的优点是方便进行物理量计算和定位，但不适合用于解剖学或图像处理。该坐标系是指在物理空间中定义的坐标系，用于描述一个物体在真实世界中的位置和姿态。世界坐标系具有唯一性和一致性，能够提供精确的位置信息，但无法直接与医学图像对应。</p>
<ol start="2">
<li>解剖学坐标系 Anatomical coordinate system：</li>
</ol>
<p>解剖学坐标系是一个基于解剖结构的坐标系，用于描述人体或动物的解剖结构。该坐标系通常由解剖学结构的方向和位置表示，如左右、前后、上下。解剖学坐标系的优点是可以更直观地描述解剖结构的方向和位置，但它不适合用于图像处理和分析。该坐标系是建立在特定解剖结构上的坐标系，用于描述解剖结构在人体中的位置和姿态。解剖学坐标系能够提供与人体解剖结构相关的信息，但对于不同的病人或不同的解剖学结构，坐标系会有所不同，因此需要进行针对性的建模。</p>
<p>解剖空间是医学成像技术中相对重要的坐标系，也称为患者坐标系。这个空间由三个平面组成，来描述人类的标准解剖位置：</p>
<ul>
<li>axial平面，轴位/横截面，平行于地面，将上与下分开</li>
<li>coronal平面，冠状面，垂直于地面，将前与后分开</li>
<li>sagittal平面，矢状面，将左与右分开</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://typora-1259418038.cos.ap-guangzhou.myqcloud.com/typora/217a6d3e4bad496e91928c0a97502fc5.png" alt="" loading="lazy"></figure>
<ul>
<li>LPS(Left, Posterior, Superior): 用于DICOM和MHD图像(meta image), ITK工具包, ITK-Snap软件(该软件中写的是RAI)使用</li>
<li>RAS(Right, Anterior, Superior): Nifti图像和3D Slicer软件使用</li>
</ul>
<ol start="3">
<li>图像坐标系 Image coordinate system：</li>
</ol>
<p>图像坐标系是医学图像中最常用的坐标系，用于描述像素在图像中的位置。该坐标系通常是一个二维网格坐标系，由行和列的像素值组成。图像坐标系的优点是适合进行图像处理和分析，但缺点是不直观，需要通过图像转换技术将其与其他坐标系进行对应。该坐标系是指在二维或三维图像中定义的坐标系，也叫像素/体素坐标系，用于描述图像中物体的位置和形态。图像坐标系具有良好的可视化表现，能够直接用于图像处理和分析，但由于不同成像设备或成像参数的不同，图像坐标系的位置和比例会发生变化。</p>
<p>图像坐标系在医学图像处理中比较重要，医疗扫描仪创建从左上角开始的点和细胞的常规矩形阵列。i 轴向右增大，j 轴向右增大，k 轴向后增大。除了每个体素的强度值（i j k）之外，还存储解剖坐标的原点和间距。原点origin表示第一个体素 voxel（0，0，0） 在解剖坐标系中的位置，例如 （100mm， 50mm， -25mm）<br>
间距spacing指定沿每个轴的体素之间的距离，例如（1.5mm，0.5mm，0.5mm）。使用原点和间距，可以计算出每个（图像坐标）体素在解剖坐标中的相应位置。</p>
<figure data-type="image" tabindex="3"><img src="https://typora-1259418038.cos.ap-guangzhou.myqcloud.com/typora/1b252b3f719afffad46b1153a90a4cc9.png" alt="" loading="lazy"></figure>
<p>在医学图像处理中，常用的坐标系变换方法有欧拉角变换、四元数变换和矩阵变换等。其中，矩阵变换是最常用的方法，可以通过矩阵乘法实现坐标系之间的转换。</p>
<p>这几个坐标系之间的转换方法有以下几种：</p>
<ol>
<li>世界坐标系到图像坐标系的转换：</li>
</ol>
<p>这个转换通常涉及到从物理坐标到像素坐标的转换。可以通过将物理坐标转换为像素坐标，然后通过插值方法来计算像素值。转换方法通常需要考虑到物理坐标系与图像坐标系之间的缩放和旋转关系。</p>
<ol start="2">
<li>解剖学坐标系到图像坐标系的转换：</li>
</ol>
<p>这个转换通常需要根据解剖学结构的位置和方向确定一个对应的图像坐标系。可以使用放射学方法，如MRI或CT扫描，来确定解剖学坐标系与图像坐标系之间的对应关系。</p>
<ol start="3">
<li>图像坐标系到解剖学坐标系的转换：</li>
</ol>
<p>这个转换通常需要确定一个物理坐标系的参考点和方向，然后将像素坐标转换为物理坐标。这个转换通常需要使用图像元素的空间坐标和CT值来确定参考点和方向。</p>
<ol start="4">
<li>图像坐标系到世界坐标系的转换：</li>
</ol>
<p>这个转换通常需要使用放射学方法，如MRI或CT扫描，来确定解剖学坐标系与图像坐标系之间的对应关系。可以使用标志物（如金属球）在扫描中的位置作为参考点，然后使用图像配准技术来确定解剖学坐标系与图像坐标系之间的变换关系。</p>
<h3 id="参考">参考</h3>
<p>https://blog.csdn.net/qq_28838891/article/details/127455132</p>
<p>https://stitch.blog.csdn.net/article/details/126405612</p>
<p>https://www.jarvis73.com/2019/06/24/Medical-Imaging-Guide/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[医学图像格式与处理工具  ]]></title>
        <id>https://Andyb1ance.github.io/post/yi-xue-tu-xiang-ge-shi-yu-chu-li-gong-ju/</id>
        <link href="https://Andyb1ance.github.io/post/yi-xue-tu-xiang-ge-shi-yu-chu-li-gong-ju/">
        </link>
        <updated>2023-03-22T10:32:16.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="医学图像格式">医学图像格式</h2>
<p>医学图像常用的格式包括六种格式：DICOM（医疗中的数字图像和通信），NIFTI（神经影像学信息技术计划），PAR/REC（飞利浦 MRI 扫描格式），ANALYZE（Mayo 医疗成像）以及 NRRD（近乎原始光栅数据）和 MNIC 格式。其中DICOM格式是最常用的，NIFTI和NRRD也很常见。三种格式的异同和优缺点如下：</p>
<ol>
<li>DICOM格式</li>
</ol>
<p>DICOM（Digital Imaging and Communications in Medicine）格式是医学图像处理中最常用的格式。它是一种开放标准，用于将医学图像、文本和其他相关信息存储为一系列文件。DICOM格式最大的优点是它具有广泛的应用和支持，可以存储各种类型的医学图像和相关信息，包括X光、CT扫描、MRI、超声等。它也支持图像的元数据，如扫描日期、扫描仪制造商、扫描参数等等，也可以存储患者信息、病历记录和影像数据，可以跨平台传输和共享。</p>
<p>然而，DICOM格式的缺点是它的复杂性和多样性，DICOM文件比较庞大，压缩效果不好，且不易与其他软件集成,不同的设备可能会存储不同的DICOM文件，这可能会导致数据的不兼容。</p>
<ol start="2">
<li>NIFTI格式<br>
NIFTI（Neuroimaging Informatics Technology Initiative）格式是一种常用的神经影像学研究的文件格式，它可以存储3D和4D MRI数据，支持各种不同的图像类型，包括MRI、PET和SPECT等，并且可以轻松地与其他软件集成。与DICOM格式不同，NIFTI格式将整个数据集存储在一个文件中，而不是将每个图像切片单独存储。这种格式的优点是它比DICOM格式更简单，具有较小的文件大小，良好的可读性和可视化效果，适用于科学研究和教育用途处理和分析。</li>
</ol>
<p>缺点是NIFTI格式不支持存储图像的元数据，如扫描日期、扫描仪制造商、扫描参数等等。</p>
<ol start="3">
<li>NRRD格式<br>
NRRD（Nearly Raw Raster Data）格式是一种比较新的开放式医学图像格式，它可以存储3D和4D医学图像，并具有压缩功能，可以减小文件大小。与DICOM和NIFTI格式不同，NRRD格式可以存储不同的图像类型和非医学图像数据。它的优点是可以用于存储各种类型的数据，而不仅仅是医学图像。此外，NRRD格式还支持存储图像的元数据。</li>
</ol>
<p>缺点是由于它是一个相对较新的格式，支持可能不如DICOM和NIFTI格式广泛，对于大型数据集可能会产生一些性能问题。</p>
<p>总之，医学图像处理中最常用的格式是DICOM、NIFTI和NRRD。DICOM格式是最常用的格式，但它比较复杂，可能导致数据不兼容。NIFTI格式比DICOM格式更简单，易于处理和分析。NRRD格式支持存储各种类型的数据和元数据，但可能不如DICOM和NIFTI格式广泛。</p>
<h3 id="参考">参考</h3>
<p>https://www.jarvis73.com/2019/06/24/Medical-Imaging-Guide/</p>
<h2 id="nifti">NIFTI</h2>
<p>NIFTI（Neuroimaging Informatics Technology Initiative）是一种常用的神经影像数据格式，用于存储磁共振成像（MRI）、正电子发射断层扫描（PET）和计算机断层扫描（CT）等医学图像数据。NIFTI格式是NIfTI-1标准的一部分，由National Institutes of Health (NIH)的Neuroimaging Informatics Technology Initiative (NITRC)组织开发和维护。NIFTI格式是NIfTI-1标准的更新版本，与旧版本（ANALYZE 7.5格式）相比，具有更好的灵活性和可扩展性</p>
<p>NIFTI格式的数据文件由两部分组成：头文件（.nii或.hdr文件）和图像文件（.nii或.img文件）。头文件包含有关数据的描述信息，例如图像的维度、方向、大小、像素间隔、数据类型等，以及可能的数据预处理历史记录。图像文件包含实际的图像数据。</p>
<p>NIFTI格式的优点之一是易于使用，并且可以被大多数神经影像工具所支持。以下是一些常用的NIFTI格式处理工具：</p>
<ol>
<li>
<p>FSL（FMRIB Software Library）：是由英国牛津大学功能磁共振成像研究组（FMRIB）开发的一套免费软件，提供了大量的神经影像分析工具，如结构和功能磁共振成像、脑电图等，是一套用于功能和结构MRI分析的开源软件库，包括用于预处理、统计分析、图像分割、配准等功能。</p>
</li>
<li>
<p>SPM（Statistical Parametric Mapping）：是一套运行在MATLAB环境下的软件，是一种常用的神经影像数据分析工具，可用于MRI、PET和SPECT等数据的统计分析、图像重建和图像显示。</p>
</li>
<li>
<p>ANTs（Advanced Normalization Tools）：是一个用于图像配准和分割的免费软件包，可用于脑部解剖学变异性的纠正。</p>
</li>
<li>
<p>AFNI（Analysis of Functional NeuroImages）：是一套免费的功能磁共振成像（fMRI）分析软件，用于MRI和PET数据分析，包括用于预处理、统计分析、图像显示和可视化等功能，提供了各种针对时间序列数据的算法。</p>
</li>
<li>
<p>ITK（Insight Segmentation and Registration Toolkit）：是一个开源的图像分割和配准工具包，可用于MRI、CT和PET数据的图像分割、配准和可视化等任务。</p>
</li>
<li>
<p>FreeSurfer：是一种常用的用于MRI数据分析的软件，主要用于皮层表面重建、脑结构分析、图像配准和可视化等功能。</p>
</li>
</ol>
<p>这些处理工具都可以读取、处理和分析NIFTI格式的神经影像数据，用户可以根据需要选择适合自己的工具进行数据分析。</p>
<p>当涉及到读取和处理NIFTI格式医学图像时，Python中有几个流行的库或包。以下是一些主要的库或包：</p>
<ol>
<li>
<p>nibabel：它是读取和操作神经影像数据的Python库之一。它可以处理多种格式，包括NIfTI-1、NIfTI-2、ANALYZE 7.5等，并提供了一系列的功能，如处理MRI，PET和DTI。</p>
</li>
<li>
<p>SimpleITK：这是一个用于医学图像处理的跨平台C++库，提供了Python界面。它可以读取和写入多种格式，包括NIFTI、DICOM、MetaImage等，并提供了许多强大的图像处理算法，如图像配准、分割、重建等。</p>
</li>
<li>
<p>PyRadiomics：它是一个开源Python库，用于从医学图像中提取与癌症相关的定量特征。它支持多种图像格式，包括NIFTI、DICOM等，并具有自动特征选择和分类器创建等功能。</p>
</li>
<li>
<p>MedPy：这是一个Python库，旨在提供各种医学图像分析工具。它支持多种图像格式，包括NIFTI、DICOM、PNG等，并提供了基本的图像处理函数，如阈值化、滤波、形态学等。</p>
</li>
<li>
<p>niwidgets：它是一个可视化NIFTI文件的Python库，使用Jupyter Notebook进行交互式可视化。它允许用户查看医学图像并将其与其他信息（如标签和解剖结构）进行比较。</p>
</li>
</ol>
<p>以上是一些用于读取和处理NIFTI格式医学图像的主要Python库或包。用户可以根据需求和项目要求选取合适的库进行使用。</p>
<h3 id="nibabel">NiBabel</h3>
<p>如果需要使用Python进行NIFTI图像处理，可以使用NiBabel库。NiBabel提供了读写NIFTI格式文件的功能，同时也支持其他常用的医学图像格式。可以使用以下命令安装NiBabel：<code>pip install nibabel</code></p>
<p>下方代码中，<code>nii_image1</code>是一个Nifti1Image对象，包含了图像的头文件和图像数据。<code>data</code>是一个三维数组，存储了图像的像素值。可以使用img.header访问头文件信息，使用img.affine访问仿射矩阵。</p>
<pre><code>nii_path = &quot;sub-OAS30027_ses-d0433_run-01_T1w.nii.gz&quot;

import nibabel as nib

nii_image1 = nib.load(nii_path)
data = nii_image1.get_fdata()
print(nii_image1)
print(nii_image1.header)
print(nii_image1.affine)
print(nii_image1.shape)
</code></pre>
<h3 id="simpleitk">SimpleITK</h3>
<pre><code>import SimpleITK as sitk
nii_image1_sitk = sitk.ReadImage(nii_path)
print(nii_image1_sitk)
print(nii_image1_sitk.GetSpacing())
print(nii_image1_sitk.GetDirection())
print(nii_image1_sitk.GetDimension())
print(nii_image1_sitk.GetSize())
print(nii_image1_sitk.GetOrigin())
print(sitk.GetArrayFromImage(nii_image1_sitk).shape) # z x y
</code></pre>
<h2 id="nrrd">NRRD</h2>
<p>NRRD（Nearly Raw Raster Data）是一种用于存储和交换图像和体数据的文件格式。它的设计目的是为了在不同的应用程序和平台之间提供一种通用的数据交换格式。NRRD格式是一种文本格式，它可以包含原始的二进制图像数据和元数据信息。</p>
<p>NRRD文件包括两个部分：文件头和文件数据。文件头包含了关于数据类型、维度、尺寸、坐标系、像素间距、方向信息、数据压缩等元数据信息，这些信息被编写为键值对。文件数据是原始的二进制图像数据。</p>
<p>NRRD格式具有以下特点：</p>
<ol>
<li>支持多种数据类型，包括无符号整型、有符号整型、浮点数、双精度数等。</li>
<li>可以存储任意维度的数据，不仅限于三维，还可以存储二维、四维甚至更高维度的数据。</li>
<li>头部信息中包含了大量的元数据，可以对图像进行详细的描述，如单位、采集参数、处理方法等。</li>
</ol>
<p>常见的NRRD处理工具包括但不限于：</p>
<ol>
<li>ITK（Insight Segmentation and Registration Toolkit）：一个开源的医学图像处理库，支持多种文件格式，包括NRRD格式。ITK提供了丰富的算法实现，如图像滤波、分割、配准等。</li>
<li>Slicer：一个开源的医学图像处理软件，基于ITK和VTK（Visualization Toolkit）库开发，支持多种文件格式，包括NRRD格式。Slicer提供了用户友好的界面和丰富的功能，包括三维可视化、体数据分割、手术规划等。</li>
<li>3D Slicer：同样基于ITK和VTK库开发，是Slicer的增强版，提供了更多的功能和插件。</li>
</ol>
<p>Python语言中的SimpleITK和PyNRRD是两个常用的Python库，都支持NRRD格式的读写和处理，可以在Python环境下进行医学图像处理和分析。其中SimpleITK是基于ITK库封装而来，提供了简洁易用的API；PyNRRD提供了读写NRRD格式文件的功能，同时也支持其他常用的医学图像格式。</p>
<h3 id="pynrrd">PyNRRD</h3>
<p>如果需要使用Python进行NRRD图像处理，可以使用PyNRRD库。可以使用以下命令安装PyNRRD：<code>pip install pynrrd</code></p>
<p>下方代码中，<code>data</code>是一个多维数组，存储了图像的像素值。<code>header</code>是一个字典，包含了头文件信息。可以使用<code>header.keys()</code>查看头文件中包含的信息。</p>
<pre><code>import nrrd

data, header = nrrd.read('path/to/file.nrrd')
print(header.keys())
</code></pre>
<h2 id="nifti和nrrd转换">NIFTI和NRRD转换</h2>
<p>下面的代码中，我们首先使用ReadImage函数读取NIFTI格式的图像数据和头文件数据，并将头文件数据保存在nifti_header变量中。然后，我们使用GetArrayFromImage函数将图像数据转换为数组，再使用GetImageFromArray函数将数组转换为图像数据。接着，我们将NRRD格式的图像数据的空间信息、原点信息和方向信息设置为与NIFTI格式的图像数据相同，然后使用GetImageHeader函数获取NRRD格式的头文件数据。最后，我们使用WriteImage函数将NRRD格式的图像数据和头文件数据写入文件。</p>
<p>注意，上面的代码中，我们将第三个参数设置为True，表示将压缩NRRD格式的图像数据。如果不需要压缩，可以将该参数设置为False。此外，如果需要将NRRD格式的图像数据写入</p>
<pre><code>#未验证
import SimpleITK as sitk

# 读取NIFTI格式的图像数据和头文件数据
nifti_image = sitk.ReadImage(&quot;path/to/nifti/image.nii.gz&quot;)
nifti_header = nifti_image.GetMetaData()

# 将NIFTI格式的图像数据和头文件数据转换为NRRD格式
nrrd_image = sitk.GetImageFromArray(sitk.GetArrayFromImage(nifti_image))
nrrd_image.SetSpacing(nifti_image.GetSpacing())
nrrd_image.SetOrigin(nifti_image.GetOrigin())
nrrd_image.SetDirection(nifti_image.GetDirection())
nrrd_header = sitk.GetImageHeader(nrrd_image)

# 将NRRD格式的图像数据和头文件数据写入文件
sitk.WriteImage(nrrd_image, &quot;path/to/nrrd/image.nrrd&quot;, True, nrrd_header)
</code></pre>
<pre><code># 这是我原来的代码
import os
from glob import glob
import SimpleITK as sitk

baseDir = os.path.normpath('C:/Users/user/Desktop/test/NIFTI')
files = glob(baseDir + '//*.nii.gz')

for file in files:
    _nii = sitk.ReadImage(file)
    sitk.WriteImage(_nii,file[:-7].replace(&quot;NIFTI&quot;,&quot;NRRD&quot;)+&quot;.nrrd&quot;)
    _nrrd = sitk.ReadImage(file[:-7].replace(&quot;NIFTI&quot;,&quot;NRRD&quot;)+&quot;.nrrd&quot;)
    _nrrd.SetSpacing(_nii.GetSpacing())
    _nrrd.SetOrigin(_nii.GetOrigin())
    _nrrd.SetDirection(_nii.GetDirection())
    sitk.WriteImage(_nrrd,file[:-7].replace(&quot;NIFTI&quot;,&quot;NRRD&quot;)+&quot;.nrrd&quot;)
    print(_nii.GetSpacing()==_nrrd.GetSpacing())
    print(_nii.GetOrigin()==_nrrd.GetOrigin())
    print(_nii.GetDirection()==_nrrd.GetDirection())
</code></pre>
<h2 id="思考">思考</h2>
<p>在深度学习中会用到头文件信息嘛？用哪些信息，尚待验证。哪些信息需要对齐？比如我读取头数据和图像数据，将图像数据读进显存，中间随意操作，输出的图像要按原有的维度数据，加上原来的头数据存成输出结果，保证前后对齐。</p>
<p>猜想：读入头数据和图像数据，按照不同图像头数据，将不同图像转换到相同的头数据空间，然后拿出转换后的图像数据，这里的图像数据才是对齐的，可以放进网络中使用。单独检验数组维度长度，很有可能没有对齐。后续保存输出结果时，一是按统一头数据存储，二是转换回原来的头数据，一的好处是方便，但是很有可能label就无法对齐了。</p>
<p>当然我们也可以先统一预处理，img和label都转换好到统一的头数据，然后在预处理后的数据集上进行实验，这样应该是最合理的。这也引出了医学图像的预处理工作。</p>
]]></content>
    </entry>
</feed>